// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(uuid()) @db.Uuid
  email       String     @unique
  username    String     @unique
  password    String?    // Nullable for Google OAuth users
  firstName   String?
  lastName    String?
  fullName    String?
  avatar      String?
  phone       Int?
  dateOfBirth DateTime?
  gender      Gender?
  bio         String?
  location    String?
  website     String?
  role        UserRole   @default(USER)
  status      UserStatus @default(OFFLINE)
  isVerified  Boolean    @default(false)
  hash        String?
  hashExpires DateTime?
  isActive    Boolean    @default(true)
  lastSeen    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // OAuth fields
  googleId    String?    @unique
  provider    String?    @default("local") // "local" or "google"

  // Debate Relations
  topics      Topic[]    @relation("UserTopics")
  arguments   Argument[]
  votes       Vote[]
  debateSessions DebateSessionParticipant[]
  evaluations DebateEvaluation[]

  @@map("users")
}

model Topic {
  id          String     @id @default(uuid()) @db.Uuid
  title       String
  description String?    @db.Text
  ownerId     String     @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  owner     User       @relation("UserTopics", fields: [ownerId], references: [id], onDelete: Cascade)
  questions Question[]
  debateSessions DebateSession[]

  @@map("topics")
}

model Question {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  topicId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  topic     Topic      @relation(fields: [topicId], references: [id], onDelete: Cascade)
  arguments Argument[]

  @@map("questions")
}

model Argument {
  id          String   @id @default(uuid()) @db.Uuid
  body        String   @db.Text
  authorId    String   @db.Uuid
  questionId  String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Voting system
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  score       Int      @default(0) // upvotes - downvotes

  // Relations
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  votes    Vote[]

  @@map("arguments")
}

// ==================== NEW MODELS ====================

model Vote {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  argumentId String   @db.Uuid
  voteType   VoteType
  createdAt  DateTime @default(now())

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  argument Argument @relation(fields: [argumentId], references: [id], onDelete: Cascade)

  @@unique([userId, argumentId])
  @@map("votes")
}

model DebateSession {
  id          String            @id @default(uuid()) @db.Uuid
  topicId     String            @db.Uuid
  title       String
  description String?           @db.Text
  status      DebateSessionStatus @default(SCHEDULED)
  startTime   DateTime
  endTime     DateTime?
  timeLimit   Int?              // Time limit in minutes for each response
  maxParticipants Int?          @default(10)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  topic        Topic                     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  participants DebateSessionParticipant[]
  evaluations  DebateEvaluation[]

  @@map("debate_sessions")
}

model DebateSessionParticipant {
  id        String   @id @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  userId    String   @db.Uuid
  role      ParticipantRole @default(PARTICIPANT)
  joinedAt  DateTime @default(now())
  leftAt    DateTime?

  // Relations
  session DebateSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([sessionId, userId])
  @@map("debate_session_participants")
}

model DebateEvaluation {
  id        String   @id @default(uuid()) @db.Uuid
  sessionId String   @db.Uuid
  evaluatorId String @db.Uuid
  participantId String @db.Uuid
  score     Int      // 1-10 scale
  feedback  String?  @db.Text
  criteria  Json?    // JSON object with detailed criteria scores
  createdAt DateTime @default(now())

  // Relations
  session     DebateSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  evaluator   User          @relation(fields: [evaluatorId], references: [id], onDelete: Cascade)

  @@unique([sessionId, evaluatorId, participantId])
  @@map("debate_evaluations")
}

// ==================== ENUMS ====================

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
  BUSY
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

enum DebateSessionStatus {
  SCHEDULED
  ACTIVE
  PAUSED
  ENDED
  CANCELLED
}

enum ParticipantRole {
  PARTICIPANT
  MODERATOR
  OBSERVER
}
