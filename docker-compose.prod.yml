services:
  # API Server - Production
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: debate_api_prod
    restart: unless-stopped
    ports:
      - "51213:51213"
    environment:
      - NODE_ENV=production
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USERNAME=${DB_USERNAME}
      - DATABASE_PASSWORD=${DB_PASSWORD}
      - DATABASE_NAME=${DB_NAME}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - AUTH_JWT_SECRET=${AUTH_JWT_SECRET}
      - AUTH_JWT_TOKEN_EXPIRES_IN=${AUTH_JWT_TOKEN_EXPIRES_IN}
      - AUTH_REFRESH_SECRET=${AUTH_REFRESH_SECRET}
      - AUTH_REFRESH_TOKEN_EXPIRES_IN=${AUTH_REFRESH_TOKEN_EXPIRES_IN}
      - APP_PREFIX=api
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - CORS_ENABLED=true
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - CORS_CREDENTIALS=true
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SECURE=${MAIL_SECURE}
      - MAIL_USER=${MAIL_USER}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_DEFAULT_EMAIL=${MAIL_DEFAULT_EMAIL}
      - MAIL_DEFAULT_NAME=${MAIL_DEFAULT_NAME}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    networks:
      - debate_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:51213/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: debate_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - debate_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache - Production
  redis:
    image: redis:7-alpine
    container_name: debate_redis_prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data_prod:/data
    networks:
      - debate_network
    healthcheck:
      test: [ "CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: debate_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - debate_network
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  debate_network:
    driver: bridge
